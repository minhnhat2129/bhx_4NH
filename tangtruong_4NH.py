import streamlit as st
import pandas as pd
import datetime

# =========================
# ‚öôÔ∏è C·∫§U H√åNH CHUNG
# =========================
today = datetime.datetime.now().day
st.set_page_config(page_title="üí∞ B√°o C√°o Th∆∞·ªüng BHX", layout="wide")
st.title("üí∞ B√°o C√°o Th∆∞·ªüng 4 Ng√†nh h√†ng & Hi·ªáu qu·∫£ Fresh - BHX")
st.markdown(
    f"<h5 style='text-align:center; color:gray;'>(D·ªØ li·ªáu c·∫≠p nh·∫≠t ƒë·∫øn ng√†y {today-1}/10)</h5>",
    unsafe_allow_html=True
)

# =========================
# üìò ƒê·ªåC FILE D·ªÆ LI·ªÜU
# =========================
try:
    dthumodel = pd.read_excel("dthu.xlsx")
    mapping_st = pd.read_excel("mapping_st.xlsx")
    mapping_4nh = pd.read_excel("mapping_4NH.xlsx")
    target_4nh = pd.read_excel("target4NH.xlsx")
    thuong_fresh = pd.read_excel("thuong_fresh.xlsx", sheet_name="Si√™u th·ªã")
except Exception as e:
    st.error(f"‚ö†Ô∏è L·ªói khi ƒë·ªçc file: {e}")
    st.stop()

# --- Chu·∫©n h√≥a c·ªôt ---
for df in [dthumodel, mapping_st, mapping_4nh, target_4nh]:
    for col in ["M√£ si√™u th·ªã", "mst"]:
        if col in df.columns:
            df[col] = df[col].astype(str).str.replace(r"\.0$", "", regex=True)
    df.columns = df.columns.str.strip()

# =========================
# üè∑Ô∏è L·∫§Y DANH S√ÅCH SI√äU TH·ªä
# =========================
if "tenst" in mapping_st.columns:
    ten_sieuthi_list = sorted(mapping_st["tenst"].dropna().unique().tolist())
else:
    ten_sieuthi_list = sorted(dthumodel["T√™n si√™u th·ªã"].dropna().unique().tolist())

chon_st = st.selectbox("üõí Ch·ªçn Si√™u th·ªã:", ["-- T·∫•t c·∫£ --"] + ten_sieuthi_list)

# =========================
# 1Ô∏è‚É£ B·∫¢NG TH∆Ø·ªûNG 4 NG√ÄNH H√ÄNG CH·ªåN
# =========================
st.subheader("üìä Th∆∞·ªüng TƒÉng tr∆∞·ªüng 4 Ng√†nh h√†ng Ch·ªçn")

merged = pd.merge(dthumodel, mapping_st, on="M√£ si√™u th·ªã", how="left")

if "Ng√†nh h√†ng BHX" in merged.columns and "Ng√†nh h√†ng BHX" in mapping_4nh.columns:
    merged = pd.merge(merged, mapping_4nh, on="Ng√†nh h√†ng BHX", how="left")
elif "Ng√†nh h√†ng" in merged.columns and "Ng√†nh h√†ng BHX" in mapping_4nh.columns:
    merged = pd.merge(
        merged, mapping_4nh,
        left_on="Ng√†nh h√†ng",
        right_on="Ng√†nh h√†ng BHX",
        how="left"
    )

if "% chia s·∫ª" not in merged.columns:
    merged["% chia s·∫ª"] = 0

if "Doanh thu" not in merged.columns:
    st.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt 'Doanh thu' trong file dthu.xlsx")
else:
    nh_col = next((c for c in ["NH", "NH ch·ªçn", "Ng√†nh h√†ng BHX"] if c in merged.columns), None)
    if not nh_col:
        st.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt ng√†nh h√†ng trong d·ªØ li·ªáu")
        st.stop()

    tong = (
        merged.groupby(["mst", "tenst", "% chia s·∫ª", nh_col], as_index=False)["Doanh thu"]
        .sum()
    )
    tong["Doanh thu d·ª± ki·∫øn"] = tong["Doanh thu"] / max(today - 1, 1) * 31

    # Merge Target
    if {"mst", "NH ch·ªçn"}.issubset(target_4nh.columns):
        tong = pd.merge(
            tong,
            target_4nh[["mst", "NH ch·ªçn", "target", "% chia s·∫ª"]],
            on=["mst", "NH ch·ªçn"],
            how="left",
            suffixes=("", "_target")
        )
        tong["% chia s·∫ª"] = tong["% chia s·∫ª_target"].combine_first(tong["% chia s·∫ª"])
        tong.drop(columns=["% chia s·∫ª_target"], inplace=True)
    else:
        st.warning("‚ö†Ô∏è File target4NH.xlsx thi·∫øu c·ªôt 'mst' ho·∫∑c 'NH ch·ªçn'")

    tong = tong[tong["target"].fillna(0) != 0]
    tong["% chia s·∫ª"] = (
        tong["% chia s·∫ª"].astype(str)
        .str.replace("%", "").str.replace(",", ".").replace("", "0").astype(float)
    )

    tong["Doanh thu tƒÉng th√™m"] = tong["Doanh thu d·ª± ki·∫øn"] - tong["target"]
    tong["Th∆∞·ªüng"] = tong["Doanh thu tƒÉng th√™m"] * tong["% chia s·∫ª"]
    cols_fix = ["Doanh thu d·ª± ki·∫øn", "Doanh thu tƒÉng th√™m", "Th∆∞·ªüng"]
    tong[cols_fix] = tong[cols_fix].clip(lower=0)

    # L·ªçc si√™u th·ªã
    if chon_st != "-- T·∫•t c·∫£ --":
        tong = tong[tong["tenst"] == chon_st]

    tong = tong.rename(columns={
        "mst": "M√£ ST",
        "tenst": "T√™n Si√™u Th·ªã",
        "NH ch·ªçn": "Ng√†nh H√†ng",
        "% chia s·∫ª": "% Chia S·∫ª",
        "Doanh thu": "Doanh Thu",
        "Doanh thu d·ª± ki·∫øn": "Doanh thu D·ª± ki·∫øn",
        "target": "Target",
        "Doanh thu tƒÉng th√™m": "TƒÉng Th√™m",
        "Th∆∞·ªüng": "Th∆∞·ªüng"
    })

    total_row = pd.DataFrame({
        "M√£ ST": ["T·ªïng"],
        "T√™n Si√™u Th·ªã": [""],
        "Ng√†nh H√†ng": [""],
        "% Chia S·∫ª": [tong["% Chia S·∫ª"].mean()],
        "Doanh Thu": [tong["Doanh Thu"].sum()],
        "Doanh thu D·ª± ki·∫øn": [tong["Doanh thu D·ª± ki·∫øn"].sum()],
        "Target": [tong["Target"].sum()],
        "TƒÉng Th√™m": [tong["TƒÉng Th√™m"].sum()],
        "Th∆∞·ªüng": [tong["Th∆∞·ªüng"].sum()],
    })
    tong = pd.concat([tong, total_row], ignore_index=True)

    def highlight_total(row):
        return ["background-color: #F8F8FF; font-weight: bold;" if row["M√£ ST"] == "T·ªïng" else ""] * len(row)

    st.dataframe(
        tong.style
        .apply(highlight_total, axis=1)
        .format({
            "% Chia S·∫ª": "{:.1%}",
            "Doanh Thu": "{:,.0f}",
            "Doanh thu D·ª± ki·∫øn": "{:,.0f}",
            "Target": "{:,.0f}",
            "TƒÉng Th√™m": "{:,.0f}",
            "Th∆∞·ªüng": "{:,.0f}"
        }),
        use_container_width=True
    )

# =========================
# 2Ô∏è‚É£ B·∫¢NG TH∆Ø·ªûNG HI·ªÜU QU·∫¢ FRESH
# =========================
st.subheader("ü•¨ Th∆∞·ªüng Hi·ªáu qu·∫£ Fresh")

# Ki·ªÉm tra d·ªØ li·ªáu fresh
if "T√™n si√™u th·ªã" not in thuong_fresh.columns:
    st.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt 'T√™n si√™u th·ªã' trong sheet 'Si√™u th·ªã'")
else:
    if chon_st != "-- T·∫•t c·∫£ --":
        df_fresh = thuong_fresh[thuong_fresh["T√™n si√™u th·ªã"] == chon_st]
    else:
        df_fresh = thuong_fresh.copy()

    # Hi·ªÉn th·ªã c·ªôt 1‚Üí13
    df_fresh = df_fresh.iloc[:, 1:14]

    # C·ªôt C√≤n thi·∫øu
    if all(c in df_fresh.columns for c in ["Doanh thu", "Gi√° v·ªën c∆° b·∫£n"]):
        df_fresh["C√≤n thi·∫øu"] = df_fresh["Doanh thu"] - df_fresh["Gi√° v·ªën c∆° b·∫£n"]

    # Format s·ªë
    df_fmt = df_fresh.copy()
    for c in df_fmt.select_dtypes(include=["number"]).columns:
        df_fmt[c] = df_fmt[c].apply(lambda x: f"{x:,.0f}" if pd.notnull(x) else "")

    def highlight_negative(val):
        try:
            v = float(str(val).replace(",", ""))
            return "color: red;" if v < 0 else ""
        except:
            return ""

    def highlight_last(x):
        df_style = pd.DataFrame("", index=x.index, columns=x.columns)
        if len(x) > 0:
            df_style.loc[x.index[-1], :] = "font-weight: bold; background-color: #f6f6f6;"
        return df_style

    styled_fresh = df_fmt.style.applymap(highlight_negative).apply(highlight_last, axis=None)
    st.dataframe(styled_fresh, use_container_width=True)
